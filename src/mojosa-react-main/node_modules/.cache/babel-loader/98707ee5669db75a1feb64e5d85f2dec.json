{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useCallback } from \"react\";\n\nfunction useForm(stateSchema) {\n  var validationSchema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var callback = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _useState = useState(stateSchema),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      disable = _useState4[0],\n      setDisable = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isDirty = _useState6[0],\n      setIsDirty = _useState6[1];\n\n  useEffect(function () {\n    setDisable(true);\n  }, []);\n  useEffect(function () {\n    if (isDirty) {\n      setDisable(validateState());\n    }\n  }, [state, isDirty]); // Used to disable submit button if there's an error in state\n  // or the required field in state has no value.\n  // Wrapped in useCallback to cached the function to avoid instensive memory leaked\n  // in every re-render in component\n\n  var validateState = useCallback(function () {\n    var hasErrorInState = _Object$keys(validationSchema).some(function (key) {\n      var isInputFieldRequired = validationSchema[key].required; // Get state value\n\n      var stateValue = state[key].value;\n      var stateError = state[key].error;\n      return isInputFieldRequired && !stateValue || stateError;\n    });\n\n    return hasErrorInState;\n  }, [state, validationSchema]);\n\n  function handleOnChange(event) {\n    setIsDirty(true);\n    var name = event.target.name;\n    var value = event.target.value;\n    var error = \"\";\n\n    if (validationSchema[name].required) {\n      if (!value) {\n        error = \"This is required field.\";\n      }\n    }\n\n    if (validationSchema[name].validator !== null && typeof validationSchema[name].validator === \"object\") {\n      if (validationSchema[name].validator.regEx) {\n        if (value && !validationSchema[name].validator.regEx.test(value)) {\n          error = validationSchema[name].validator.error;\n        }\n      }\n    }\n\n    setState(function (prevState) {\n      return _objectSpread({}, prevState, _defineProperty({}, name, {\n        value: value,\n        error: error\n      }));\n    });\n  }\n\n  function handleOnSubmit(event) {\n    event.preventDefault(); // Making sure that validateState returns false\n    // Before calling the submit callback function\n\n    if (!validateState()) {\n      callback();\n    }\n  }\n\n  return {\n    state: state,\n    disable: disable,\n    handleOnChange: handleOnChange,\n    handleOnSubmit: handleOnSubmit\n  };\n}\n\nexport default useForm;","map":null,"metadata":{},"sourceType":"module"}